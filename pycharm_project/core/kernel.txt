
inline float relu(float x) {
    return fmax(0.0f, x);
}

__kernel void forward(__global float* inputs, __global float* outputs,
                      __global float* weights, __global float* biases,
                      int filter_width, int filter_height,
                      int input_width, int input_height,
                      int filter_row_count, int stride) {
    int x = get_global_id(0);
    int y = get_global_id(1);

    int absolute_x = x * stride;
    int absolute_y = y * stride;


    float local_sum = 0;
    for (int dx = 0; dx < filter_width; dx++) {
        for (int dy = 0; dy < filter_height; dy++) {
            int pixel_x = absolute_x + dx;
            int pixel_y = absolute_y + dy;

            if ((pixel_x < input_width) && (pixel_y < input_height)) {
                int pixel_index = pixel_y * input_width + pixel_x;
                int weight_index = dy * filter_width + dx;

                local_sum += (inputs[pixel_index] * weights[weight_index]);
            }
        }
    }

    local_sum += biases[0];  // only ever 1 bias, a buffer is overkill ik

    int output_index = y * filter_row_count + x;
    outputs[output_index] = local_sum;
}
